{"version":3,"sources":["services/RequestService.js","components/SingleSelect.js","components/NumberInput.js","components/DatetimeInput.js","components/FilterPanel.js","components/AlbumCard.js","components/PlaylistsResult.js","components/NavigationBar.js","services/LocalStorageService.js","components/Spinner.js","components/ErrorModal.js","components/FeaturedPlaylist.js","components/Login.js","App.js","serviceWorker.js","index.js","messages/messages.js","logo.svg"],"names":["resquestService","searchJSON","accessToken","queryParameters","this","buildQueryParameters","axios","get","concat","headers","Authorization","then","response","data","queryString","stringify","SingleSelect","props","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","value","undefined","onChangeValue","bind","assertThisInitialized","option","name","setState","onChange","react_default","a","createElement","react_select_esm","getOptionLabel","getOptionValue","options","isMulti","placeholder","isClearable","React","Component","NumberInput","event","target","min","max","reactstrap_es","type","DatetimeInput","momentObj","console","log","moment","format","pattern","DateTime_default","closeOnSelect","inputProps","FilterPanel","filters","_this2","requestService","getFilters","filter","component","_this3","updateSearchJSON","id","key","values","SingleSelect_SingleSelect","assign","validation","primitiveType","NumberInput_NumberInput","replace","DatetimeInput_DatetimeInput","_this4","messages","intl","_","map","createFilter","className","injectIntl","AlbumCard","top","width","src","photo","albumName","PlaylistsResult","playlists","length","react_photo_gallery_es","photos","ImageComponent","color","react_fontawesome_index_es","icon","faInfoCircle","NavigationBar","dark","expand","href","navbar","faGithub","size","localStorageService","LocalStorageService","tokenKey","token","localStorage","setItem","getItem","removeItem","Spinner","faSpinner","spin","ErrorModal","isOpen","errorMSG","FeaturedPlaylist","locale","country","timestamp","limit","offset","loading","validToken","errorModal","fecthPlaylists","window","history","pushState","refreshPlaylists","setInterval","clearInterval","removeToken","filterName","contentId","components_ErrorModal","getToken","getPlaylists","result","resultPlaylist","items","processPlaylist","catch","error","status","toast","message","createErrorModal","rawPlayList","forEach","item","push","images","url","height","fluid","components_FilterPanel","components_PlaylistsResult","Spinner_Spinner","lib","xs","onClick","location","process","faSpotify","App","hash","queryParam","parse","components_Login","access_token","storeToken","components_FeaturedPlaylist","Boolean","hostname","match","addLocaleData","toConsumableArray","pt","en","language","navigator","pt-BR","login.button","filter_panel.title","filter_panel.filter.locale","filter_panel.filter.country","filter_panel.filter.date","filter_panel.filter.size","filter_panel.filter.page","error_modal.title","error_modal.errorRequest","error_modal.expireToken","playlist_result.empty","en-US","ReactDOM","render","index_es","src_App_0","document","getElementById","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"kUA2BeA,EAFS,yGApBPC,EAAYC,GACrB,IAAIC,EAAkBC,KAAKC,qBAAqBJ,GAChD,OAAOK,IAAMC,IAAN,wDAAAC,OAAkEL,GAAmB,CACxFM,QAAU,CACNC,cAAA,UAAAF,OAA4BN,MAEjCS,KAAK,SAAAC,GAAQ,OAAIA,EAASC,oDAGZZ,GACjB,OAAOa,IAAYC,UAAUd,wCAK7B,OAAOK,IAAMC,IAAN,oDACFI,KAAK,SAAAC,GAAQ,OAAIA,EAASC,0CClBlBG,cAEjB,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAf,KAAAY,IACdE,EAAAC,OAAAE,EAAA,EAAAF,CAAAf,KAAAe,OAAAG,EAAA,EAAAH,CAAAH,GAAAO,KAAAnB,KAAMa,KACDO,MAAQ,CACTC,WAAQC,GAEZR,EAAKS,cAAgBT,EAAKS,cAAcC,KAAnBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KALPA,8EAQHY,GACX,OAAOA,EAAOC,4CAEHD,GACX,OAAOA,EAAOL,4CAGJK,GACV,IAAIL,EAAQK,EAASA,EAAOL,WAAQC,EACpCtB,KAAK4B,SAAS,CAACP,UACfrB,KAAKa,MAAMgB,SAASR,oCAIpB,OACIS,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQC,eAAgBlC,KAAKkC,eAAgBC,eAAgBnC,KAAKmC,eAC1DC,QAASpC,KAAKa,MAAMuB,QAASC,SAAS,EAAOC,YAAatC,KAAKa,MAAMyB,YACrET,SAAW7B,KAAKuB,cAAeF,MAAOrB,KAAKa,MAAMQ,MAAOkB,aAAa,WA3B/CC,IAAMC,WCA3BC,cAEjB,SAAAA,EAAY7B,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAf,KAAA0C,IACd5B,EAAAC,OAAAE,EAAA,EAAAF,CAAAf,KAAAe,OAAAG,EAAA,EAAAH,CAAA2B,GAAAvB,KAAAnB,KAAMa,KACDO,MAAQ,CACTC,MAAQ,IAGZP,EAAKe,SAAWf,EAAKe,SAASL,KAAdT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KANFA,wEAST6B,GACL,IAAItB,EAAQsB,EAAMC,OAAOvB,QACrBA,GACErB,KAAKa,MAAMgC,KAAOxB,EAAMrB,KAAKa,MAAMgC,KAAS7C,KAAKa,MAAMiC,KAAOzB,EAAMrB,KAAKa,MAAMiC,OACjFzB,EAAM,IAEVrB,KAAK4B,SAAS,CAACP,UAGZA,EACCrB,KAAKa,MAAMgB,SAASR,GAEpBrB,KAAKa,MAAMgB,cAASP,oCAKxB,OACIQ,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAOC,KAAK,SAASV,YAAatC,KAAKa,MAAMyB,YACrCT,SAAU7B,KAAK6B,SAAUR,MAAOrB,KAAKoB,MAAMC,eA9BtBmB,IAAMC,6CCC1BQ,cAEjB,SAAAA,EAAYpC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAf,KAAAiD,IACdnC,EAAAC,OAAAE,EAAA,EAAAF,CAAAf,KAAAe,OAAAG,EAAA,EAAAH,CAAAkC,GAAA9B,KAAAnB,KAAMa,KACDgB,SAAWf,EAAKe,SAASL,KAAdT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KAFFA,wEAKToC,GACLC,QAAQC,IAAIF,GACTA,aAAqBG,IACpBrD,KAAKa,MAAMgB,SAASqB,EAAUI,OAAOtD,KAAKa,MAAM0C,UACzCL,GACPlD,KAAKa,MAAMgB,cAASP,oCAKxB,OACIQ,EAAAC,EAAAC,cAACwB,EAAAzB,EAAD,CAAU0B,eAAe,EAAMnB,YAAatC,KAAKa,MAAMyB,YAAaT,SAAU7B,KAAK6B,SAAU6B,WAAY1D,KAAKa,MAAM6C,oBAlBrFlB,IAAMC,WCe3CkB,cAEF,SAAAA,EAAY9C,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAf,KAAA2D,IACd7C,EAAAC,OAAAE,EAAA,EAAAF,CAAAf,KAAAe,OAAAG,EAAA,EAAAH,CAAA4C,GAAAxC,KAAAnB,KAAMa,KACDO,MAAQ,CACVwC,aAAUtC,GAHCR,mFAOC,IAAA+C,EAAA7D,KACf8D,EAAeC,aAAaxD,KAAK,SAAAC,GAC7BqD,EAAKjC,SAAS,CAACgC,QAAUpD,EAASoD,iDAI7BI,GAAQ,IACbC,EADaC,EAAAlE,KAEba,EAAO,CACPyB,YAAc0B,EAAOrC,KACrBE,SAAW,SAAAR,GAAK,OAAI6C,EAAKrD,MAAMsD,iBAAiBH,EAAOI,GAAI/C,IAC3DgD,IAAML,EAAOI,IAEjB,GAAIJ,EAAOM,OACPL,EAAYnC,EAAAC,EAAAC,cAACuC,EAADxD,OAAAyD,OAAA,GAAkB3D,EAAlB,CAAyBuB,QAAS4B,EAAOM,eAEpD,GAAIN,EAAOS,WAAY,CACxB,IAAIA,EAAaT,EAAOS,WACpBzB,EAAOyB,EAAWC,cACtB,OAAO1B,GACH,IAAK,UACEyB,EAAW5B,MACVhC,EAAMgC,IAAM4B,EAAW5B,KAExB4B,EAAW3B,MACVjC,EAAMiC,IAAM2B,EAAW3B,KAE3BmB,EAAYnC,EAAAC,EAAAC,cAAC2C,EAAgB9D,GACjC,MACA,IAAK,SACDA,EAAM6C,WAAW,CAACpB,YAAc0B,EAAOrC,MAEvCd,EAAM0C,QAAQkB,EAAWlB,QAAQqB,QAAQ,OAAQ,QAAQA,QAAQ,KAAM,MACvEX,EAAYnC,EAAAC,EAAAC,cAAC6C,EAAiBhE,GAClC,MACA,QACIsC,QAAQC,IAAR,eAAAhD,OAA2B4C,KAGvC,OAAOiB,mCAGH,IAAAa,EAAA9E,KACG+E,EAAY/E,KAAKa,MAAMmE,KAAvBD,SACDnB,EAAUqB,IAAEC,IAAIlF,KAAKoB,MAAMwC,QAAS,SAAAI,GACtC,IAAIC,EAAYa,EAAKK,aAAanB,GAElC,OADelC,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAKsB,IAAKL,EAAOI,IAAKH,KAGzC,OACInC,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAMqC,UAAU,aACZtD,EAAAC,EAAAC,cAACe,EAAA,EAAD,KAAagC,EAAS,uBACtBjD,EAAAC,EAAAC,cAACe,EAAA,EAAD,KACIjB,EAAAC,EAAAC,cAACe,EAAA,EAAD,KACGjB,EAAAC,EAAAC,cAACe,EAAA,EAAD,KACKa,aAhEFpB,IAAMC,WA+EjB4C,cAAW1B,WC1FL2B,mLAGb,OACIxD,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAMqC,UAAU,aACZtD,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAASwC,KAAG,EAACC,MAAM,OAAOC,IAAKzF,KAAKa,MAAM6E,MAAMD,MAChD3D,EAAAC,EAAAC,cAACe,EAAA,EAAD,KACIjB,EAAAC,EAAAC,cAACe,EAAA,EAAD,KAAY/C,KAAKa,MAAM6E,MAAMC,oBAPVnD,IAAMC,2BCOvCmD,mLAEM,IACGC,EAAa7F,KAAKa,MAAlBgF,UACAd,EAAY/E,KAAKa,MAAMmE,KAAvBD,SACP,OACIjD,EAAAC,EAAAC,cAAA,WACK6D,GAAaA,EAAUC,OAAQ,EAChChE,EAAAC,EAAAC,cAAC+D,EAAA,EAAD,CACIC,OAAQH,EACRI,eAAgBX,IAEpBxD,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAOmD,MAAM,YAAYd,UAAU,aAC/BtD,EAAAC,EAAAC,cAACmE,EAAA,EAAD,CAAiBC,KAAMC,iBAD3B,IAC8CtB,EAAS,kCAbzCvC,IAAMC,WAyBrB4C,cAAWO,WC3BX,SAASU,EAAczF,GAElC,OACIiB,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAQmD,MAAM,UAAUK,MAAI,EAACC,OAAO,MAChC1E,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAa0D,KAAK,KAAlB,aACA3E,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAKqC,UAAU,UAAUsB,QAAM,GAC7B5E,EAAAC,EAAAC,cAACe,EAAA,EAAD,KACEjB,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAS0D,KAAK,oDACV3E,EAAAC,EAAAC,cAACmE,EAAA,EAAD,CAAiBC,KAAMO,WAAUC,KAAK,sBCC3CC,EAFa,eAlBxB,SAAAC,IAAc/F,OAAAC,EAAA,EAAAD,CAAAf,KAAA8G,GACV9G,KAAK+G,SAAS,oEAGPC,GACPC,aAAaC,QAAQlH,KAAK+G,SAAUC,sCAIpC,OAAOC,aAAaE,QAAQnH,KAAK+G,gDAIjCE,aAAaG,WAAWpH,KAAK+G,2BCRtB,SAASM,IAEvB,OAAOvF,EAAAC,EAAAC,cAAA,OAAKoD,UAAU,eACftD,EAAAC,EAAAC,cAACmE,EAAA,EAAD,CAAiBf,UAAU,kBAAkBgB,KAAMkB,YAAWV,KAAK,KAAKW,MAAI,gBCE9EC,mLAEM,IACGzC,EAAY/E,KAAKa,MAAMmE,KAAvBD,SACP,OAAOjD,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAO0E,QAAQ,GAClB3F,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAaqC,UAAU,sBAAsBL,EAAS,sBACtDjD,EAAAC,EAAAC,cAACe,EAAA,EAAD,KAAY/C,KAAKa,MAAM6G,kBANVlF,IAAMC,WAehB4C,cAAWmC,WCJpBG,sBAEF,SAAAA,EAAY9G,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAf,KAAA2H,IACd7G,EAAAC,OAAAE,EAAA,EAAAF,CAAAf,KAAAe,OAAAG,EAAA,EAAAH,CAAA4G,GAAAxG,KAAAnB,KAAMa,KAEDO,MAAQ,CACTvB,WAAa,CACT+H,YAAStG,EACTuG,aAAUvG,EACVwG,eAAYxG,EACZyG,WAAQzG,EACR0G,YAAS1G,GAEbuE,eAAYvE,EACZ2G,SAAU,EACVC,YAAa,EACbC,gBAAa7G,GAEjBR,EAAKqD,iBAAmBrD,EAAKqD,iBAAiB3C,KAAtBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KACxBA,EAAKsH,eAAiBtH,EAAKsH,eAAe5G,KAApBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KAjBRA,mFAoBC,IAAA+C,EAAA7D,KACfqI,OAAOC,QAAQC,UAAU,KAAM,GAAI,KACnCvI,KAAKwI,iBAAmBC,YAAY,kBAAO5E,EAAKuE,kBAAkB,KAClEpI,KAAKoI,gEAILM,cAAc1I,KAAKwI,kBACnB3B,EAAoB8B,uDAGPC,EAAYvH,GAAM,IAC1BxB,EAAcG,KAAKoB,MAAnBvB,WACLA,EAAW+I,GAAcvH,EACzBrB,KAAK4B,SAAS,CAAC/B,eACfsD,QAAQC,IAAIpD,KAAKoB,MAAMvB,YACvBG,KAAKoI,0DAGQS,GAAU,IAChB9D,EAAY/E,KAAKa,MAAMmE,KAAvBD,SACP,OAAOjD,EAAAC,EAAAC,cAAC8G,EAAD,CAAYpB,SAAU3C,EAAS8D,8CAG1B,IAAA3E,EAAAlE,KACNgH,EAAQH,EAAoBkC,WAClC,GAAG/B,GAAShH,KAAKoB,MAAM8G,WACnBlI,KAAK4B,SAAS,CAACqG,SAAU,IACzBnE,EAAekF,aAAahJ,KAAKoB,MAAMvB,WAAYmH,GAAOzG,KAAK,SAAA0I,GAC3D,IAAMC,EAAiBD,EAAOpD,UAC9B,GAAGqD,GAAkBA,EAAeC,MAAM,CACtC,IAAItD,EAAU3B,EAAKkF,gBAAgBF,EAAeC,OAClDjF,EAAKtC,SAAS,CAACiE,YAAWoC,SAAU,OAEzCoB,MAAM,SAAAC,GAEL,GAA4B,KAAzBA,EAAM9I,SAAS+I,OACdC,QAAMF,MAAMA,EAAM9I,SAASC,KAAK6I,MAAMG,SACtCvF,EAAKtC,SAAS,CAACqG,SAAU,QAEzB,CACA,IAAME,EAAajE,EAAKwF,iBAAiB,4BACzCxF,EAAKtC,SAAS,CAACqG,SAAU,EAAOC,YAAa,EAAOC,eACpDO,cAAcxE,EAAKsE,yBAI3B,CACA,IAAML,EAAanI,KAAK0J,iBAAiB,2BACzC1J,KAAK4B,SAAS,CAACsG,YAAa,EAAOC,eACnCO,cAAc1I,KAAKwI,2DAIXmB,GACZ,IAAI9D,EAAW,GASf,OARAZ,IAAE2E,QAAQD,EAAa,SAAAE,GACnBhE,EAAUiE,KAAK,CACXrE,IAAMoE,EAAKE,OAAO,GAAGC,IACrBrE,UAAYkE,EAAKlI,KACjB6D,MAAQ,IACRyE,OAAS,QAGVpE,mCAIP,OACA/D,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACsE,EAAD,MACAxE,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAWmH,OAAK,GACZpI,EAAAC,EAAAC,cAACe,EAAA,EAAD,KACIjB,EAAAC,EAAAC,cAACe,EAAA,EAAD,KACIjB,EAAAC,EAAAC,cAACmI,EAAD,CAAahG,iBAAkBnE,KAAKmE,qBAI5CrC,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAKqC,UAAU,sCACXtD,EAAAC,EAAAC,cAACe,EAAA,EAAD,KACIjB,EAAAC,EAAAC,cAACoI,EAAD,CAAiBvE,UAAW7F,KAAKoB,MAAMyE,eAKlD7F,KAAKoB,MAAM6G,SAAWnG,EAAAC,EAAAC,cAACqI,EAAD,MAEtBrK,KAAKoB,MAAM+G,WAEZrG,EAAAC,EAAAC,cAACsI,EAAA,eAAD,cA/GmB9H,IAAMC,YAyHtB4C,cAAWsC,UCvGXtC,kBAvBf,SAAgBxE,GAAM,IACXkE,EAAYlE,EAAMmE,KAAlBD,SACP,OACIjD,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAWqC,UAAU,SACjBtD,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAKqC,UAAU,4BACXtD,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAKwH,GAAI,EAAGnF,UAAU,WAClBtD,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAWqC,UAAU,sCACjBtD,EAAAC,EAAAC,cAAA,MAAIoD,UAAU,kBAAd,aACAtD,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAQmD,MAAM,UAAUlD,KAAK,SAAS4D,KAAK,KACvC4D,QAAS,kBAAMnC,OAAOoC,SAAP,sHAAArK,OAAsIsK,gDACpJ5I,EAAAC,EAAAC,cAACmE,EAAA,EAAD,CAAiBC,KAAMuE,YAAW/D,KAAK,OAF5C,IAEoD7B,EAAS,uBCFtE6F,mLAdX,IAAMC,EAAOxC,OAAOoC,SAASI,KACzBC,EAAWpK,IAAYqK,MAAMF,GAC7B5G,EAAWnC,EAAAC,EAAAC,cAACgJ,EAAD,MAMf,OALGF,EAAWG,eACZpE,EAAoBqE,WAAWJ,EAAWG,cAC1ChH,EAAUnC,EAAAC,EAAAC,cAACmJ,EAAD,OAIRlH,SAbUxB,aCIE2I,QACW,cAA7B/C,OAAOoC,SAASY,UAEe,UAA7BhD,OAAOoC,SAASY,UAEhBhD,OAAOoC,SAASY,SAASC,MACvB,wGCJNC,YAAa,GAAAnL,OAAAW,OAAAyK,EAAA,EAAAzK,CAAK0K,KAAL,CAASC,OACtB,IAAMC,GAAWC,UAAUD,UAAY,QACjClC,GChBS,CACXoC,QAAU,CACNC,eAAiB,QACjBC,qBAAuB,qBACvBC,6BAA+B,YAC/BC,8BAAgC,UAChCC,2BAA6B,oBAC7BC,2BAA6B,oBAC7BC,2BAA6B,YAC7BC,oBAAsB,OACtBC,2BAA6B,8EAC7BC,0BAA4B,0DAC5BC,wBAA0B,oCAE9BC,QAAU,CACNX,eAAiB,QACjBC,qBAAuB,kBACvBC,6BAA+B,SAC/BC,8BAAgC,UAChCC,2BAA6B,OAC7BC,2BAA6B,eAC7BC,2BAA6B,OAC7BC,oBAAsB,QACtBC,2BAA6B,6DAC7BC,0BAA4B,uCAC5BC,wBAA0B,4BDTPb,IAE3Be,IAASC,OAAO7K,EAAAC,EAAAC,cAAC4K,EAAA,EAAD,CAAchF,OAAQ+D,GAAU5G,SAAU0E,IAAS3H,EAAAC,EAAAC,cAAC6K,EAAD,OAAwBC,SAASC,eAAe,SD+G7G,kBAAmBnB,WACrBA,UAAUoB,cAAcC,MAAM1M,KAAK,SAAA2M,GACjCA,EAAaC,gHGnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.e89c70d6.chunk.js","sourcesContent":["import axios from 'axios';\nimport queryString from 'query-string'\n\nclass RequestService {\n\n    getPlaylists(searchJSON, accessToken){\n        let queryParameters = this.buildQueryParameters(searchJSON);\n        return axios.get(`https://api.spotify.com/v1/browse/featured-playlists?${queryParameters}`, {\n            headers : {\n                \"Authorization\" : `Bearer ${accessToken}`\n            }\n        }).then(response => response.data)\n    }\n\n    buildQueryParameters(searchJSON){\n        return queryString.stringify(searchJSON);\n    }\n\n    getFilters(){\n        //use https to fetch from heroku\n        return axios.get(`https://www.mocky.io/v2/5a25fade2e0000213aa90776`)\n            .then(response => response.data)\n    }\n}\n\nconst resquestService = new RequestService();\n\nexport default resquestService;","import React from 'react';\nimport Select from 'react-select'\n\nexport default class SingleSelect extends React.Component{\n\n    constructor(props){\n        super(props);\n        this.state = {\n            value : undefined\n        }\n        this.onChangeValue = this.onChangeValue.bind(this);\n    }\n\n    getOptionLabel(option){\n        return option.name;\n    }\n    getOptionValue(option){\n        return option.value;\n    }\n\n    onChangeValue(option){\n        let value = option ? option.value : undefined;\n        this.setState({value})\n        this.props.onChange(value);\n    }\n\n    render(){\n        return(\n            <Select getOptionLabel={this.getOptionLabel} getOptionValue={this.getOptionValue}\n                    options={this.props.options} isMulti={false} placeholder={this.props.placeholder}\n                    onChange ={this.onChangeValue} value={this.props.value} isClearable={true}/>\n            )\n    }\n}","import React from 'react';\nimport {Input} from 'reactstrap';\n\nexport default class NumberInput extends React.Component{\n\n    constructor(props){\n        super(props);\n        this.state = {\n            value : '',\n        }\n\n        this.onChange = this.onChange.bind(this);\n    }\n\n    onChange(event){\n        let value = event.target.value;\n        if(!value ||\n            ((this.props.min && value<this.props.min) || (this.props.max && value>this.props.max))) {\n            value='';\n        }\n        this.setState({value});\n\n        //failsafe when empty\n        if(value){\n            this.props.onChange(value);\n        }else{\n            this.props.onChange(undefined);\n        }\n    }\n\n    render(){\n        return (\n            <Input type=\"number\" placeholder={this.props.placeholder}\n                    onChange={this.onChange} value={this.state.value} />\n        )\n    }\n\n}","import React from 'react';\nimport Datetime from 'react-datetime'\nimport moment from 'moment';\n\nexport default class DatetimeInput extends React.Component{\n\n    constructor(props){\n        super(props);\n        this.onChange = this.onChange.bind(this);\n    }\n\n    onChange(momentObj){\n        console.log(momentObj);\n        if(momentObj instanceof moment){\n            this.props.onChange(momentObj.format(this.props.pattern));\n        } else if(!momentObj){\n            this.props.onChange(undefined);\n        }\n    }\n\n    render(){\n        return (\n            <Datetime closeOnSelect={true} placeholder={this.props.placeholder} onChange={this.onChange} inputProps={this.props.inputProps}/>\n        )\n    }\n\n}","import React from 'react';\nimport {\n    intlShape,\n    injectIntl,\n} from 'react-intl';\nimport {\n    Card,\n    CardHeader,\n    CardBody,\n    Container,\n    Row,\n    Col,\n} from 'reactstrap';\nimport requestService from '../services/RequestService'\nimport _ from 'lodash'\nimport SingleSelect from './SingleSelect'\nimport NumberInput from './NumberInput'\nimport DatetimeInput from './DatetimeInput';\n\nclass FilterPanel extends React.Component{\n\n    constructor(props){\n        super(props)\n        this.state = {\n           filters : undefined,\n        }\n    }\n\n    componentDidMount(){\n        requestService.getFilters().then(response => {\n            this.setState({filters : response.filters})\n        })\n    }\n\n    createFilter(filter) {\n        let component;\n        let props ={\n            placeholder : filter.name,\n            onChange : value => this.props.updateSearchJSON(filter.id, value),\n            key : filter.id,\n        }\n        if (filter.values) {\n            component = <SingleSelect {...props} options={filter.values}  />;\n        }\n        else if (filter.validation) {\n            let validation = filter.validation;\n            let type = validation.primitiveType\n            switch(type){\n                case \"INTEGER\" :\n                    if(validation.min){\n                        props.min = validation.min\n                    }\n                    if(validation.max){\n                        props.max = validation.max;\n                    }\n                    component = <NumberInput {...props} />\n                break;\n                case \"STRING\" :\n                    props.inputProps={placeholder : filter.name}\n                    //workaround to be compatible with moment api\n                    props.pattern=validation.pattern.replace('yyyy', 'YYYY').replace('dd', 'DD')\n                    component = <DatetimeInput{...props}/>\n                break;\n                default :\n                    console.log(`Unknow type ${type}`)\n            }\n        }\n        return component;\n    }\n\n    render(){\n        const {messages} = this.props.intl;\n        const filters = _.map(this.state.filters, filter => {\n            let component = this.createFilter(filter)\n            let colFilter =<Col key={filter.id}>{component}</Col>;\n            return colFilter;\n        })\n        return (\n            <Card className=\"mt-2 mx-2\">\n                <CardHeader>{messages[\"filter_panel.title\"]}</CardHeader>\n                <CardBody>\n                    <Container>\n                       <Row>\n                           {filters}\n                       </Row>\n                    </Container>\n                    \n                </CardBody>\n            </Card>\n        )\n    }\n\n}\n\nFilterPanel.propTypes = {\n    intl: intlShape.isRequired,\n};\n\nexport default injectIntl(FilterPanel)","import React from 'react';\nimport {\n    Card,\n    CardImg,\n    CardTitle,\n    CardBody,\n} from 'reactstrap';\n\nexport default class AlbumCard extends React.Component{\n\n    render(){\n        return (\n            <Card className=\"mx-1 my-1\">\n                <CardImg top width=\"100%\" src={this.props.photo.src}  />\n                <CardBody>\n                    <CardTitle>{this.props.photo.albumName}</CardTitle>\n                </CardBody>\n            </Card>\n        )\n    }\n}","import React from 'react';\nimport Gallery from 'react-photo-gallery';\nimport AlbumCard from './AlbumCard'\nimport {\n    intlShape,\n    injectIntl,\n} from 'react-intl';\nimport {\n    Alert\n} from 'reactstrap'\nimport {\n    faInfoCircle,\n} from \"@fortawesome/free-solid-svg-icons/index\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nclass PlaylistsResult extends React.Component{\n\n    render(){\n        const {playlists} = this.props;\n        const {messages} = this.props.intl;\n        return (\n            <div>\n                {playlists && playlists.length >0 ? \n                <Gallery\n                    photos={playlists}\n                    ImageComponent={AlbumCard}/>\n                : \n                <Alert color=\"secondary\" className=\"mx-5 mt-5\">\n                    <FontAwesomeIcon icon={faInfoCircle} /> { messages[\"playlist_result.empty\"]}\n                </Alert>}\n            </div>\n        )\n    }\n\n}\n\nPlaylistsResult.propTypes = {\n    intl: intlShape.isRequired,\n};\n\nexport default injectIntl(PlaylistsResult)","import React from 'react'\nimport {\n    Navbar,\n    NavbarBrand,\n    Nav,\n    NavItem,\n    NavLink\n} from 'reactstrap';\nimport {\n    faGithub\n} from \"@fortawesome/free-brands-svg-icons/index\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nexport default function NavigationBar(props){\n\n    return (\n        <Navbar color=\"primary\" dark expand=\"md\">\n            <NavbarBrand href=\"#\">Spotifood</NavbarBrand>\n            <Nav className=\"ml-auto\" navbar>\n              <NavItem>\n                <NavLink href=\"https://github.com/hashiCode/ifood-frontend-test\">\n                    <FontAwesomeIcon icon={faGithub} size=\"lg\"/>\n                </NavLink>\n              </NavItem>\n              </Nav>\n        </Navbar>\n    )\n}","class LocalStorageService{\n    \n    constructor(){\n        this.tokenKey=\"auth_token\"\n    }\n\n    storeToken(token){\n        localStorage.setItem(this.tokenKey, token);\n    }\n\n    getToken(){\n        return localStorage.getItem(this.tokenKey);\n    }\n\n    removeToken(){\n        localStorage.removeItem(this.tokenKey);\n    }\n\n}\n\nconst localStorageService = new LocalStorageService();\n\nexport default localStorageService;","import React from 'react';\nimport {\n    faSpinner,\n} from \"@fortawesome/free-solid-svg-icons/index\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport './css/Spinner.scss'\n\nexport default function Spinner(){\n\n\treturn <div className='pageSpinner'>\n        <FontAwesomeIcon className='pageSpinnerIcon' icon={faSpinner} size=\"3x\" spin />\n    </div>;\n}","import React from 'react'\nimport {\n    Modal,\n    ModalHeader,\n    ModalBody,\n} from 'reactstrap';\nimport {\n    intlShape,\n    injectIntl,\n} from 'react-intl';\nimport './css/ErrorModal.scss'\n\nclass ErrorModal extends React.Component{\n\n    render(){\n        const {messages} = this.props.intl;\n        return <Modal isOpen={true}>\n            <ModalHeader className=\"error-modal-header\">{messages[\"error_modal.title\"]}</ModalHeader>\n            <ModalBody>{this.props.errorMSG}</ModalBody>\n        </Modal>\n    }\n}\n\nErrorModal.propTypes = {\n    intl: intlShape.isRequired,\n};\n\nexport default injectIntl(ErrorModal)","import React from 'react';\nimport FilterPanel from './FilterPanel';\nimport PlaylistsResult from './PlaylistsResult';\nimport {\n    Container,\n    Row,\n    Col,\n} from 'reactstrap';\nimport {\n    intlShape,\n    injectIntl,\n} from 'react-intl';\nimport NavBar from './NavigationBar'\nimport 'react-datetime/css/react-datetime.css'\nimport 'moment';\nimport requestService from '../services/RequestService';\nimport _ from 'lodash'\nimport localStorageService from '../services/LocalStorageService'\nimport Spinner from './Spinner';\nimport ErrorModal from './ErrorModal'\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.min.css';\n\nclass FeaturedPlaylist extends React.Component{\n\n    constructor(props){\n        super(props);\n        \n        this.state = {\n            searchJSON : {\n                locale : undefined,\n                country : undefined,\n                timestamp : undefined,\n                limit : undefined,\n                offset : undefined,\n            },\n            playlists : undefined,\n            loading : false,\n            validToken : true,\n            errorModal : undefined,\n        }\n        this.updateSearchJSON = this.updateSearchJSON.bind(this);\n        this.fecthPlaylists = this.fecthPlaylists.bind(this);\n    }\n\n    componentDidMount(){\n        window.history.pushState(null, '', '/')\n        this.refreshPlaylists = setInterval(() =>  this.fecthPlaylists(), 30000);\n        this.fecthPlaylists()\n    }\n\n    componentWillUnmount(){\n        clearInterval(this.refreshPlaylists)\n        localStorageService.removeToken();\n    }\n\n    updateSearchJSON(filterName, value){\n        let {searchJSON} = this.state;\n        searchJSON[filterName] = value;\n        this.setState({searchJSON});\n        console.log(this.state.searchJSON);\n        this.fecthPlaylists();\n    }\n\n    createErrorModal(contentId){\n        const {messages} = this.props.intl;\n        return <ErrorModal errorMSG={messages[contentId]} />\n    }\n\n    fecthPlaylists(){\n        const token = localStorageService.getToken();\n        if(token && this.state.validToken){\n            this.setState({loading : true})\n            requestService.getPlaylists(this.state.searchJSON, token).then(result => {\n                const resultPlaylist = result.playlists\n                if(resultPlaylist && resultPlaylist.items){\n                    let playlists=this.processPlaylist(resultPlaylist.items);\n                    this.setState({playlists, loading : false});\n                }\n            }).catch(error => {\n                //TODO check for other erros/ refresh token\n                if(error.response.status == 400){\n                    toast.error(error.response.data.error.message);\n                    this.setState({loading : false})\n                }\n                else{\n                    const errorModal = this.createErrorModal(\"error_modal.errorRequest\")\n                    this.setState({loading : false, validToken : false, errorModal});\n                    clearInterval(this.refreshPlaylists)\n                }\n            });\n        }\n        else{\n            const errorModal = this.createErrorModal(\"error_modal.expireToken\")\n            this.setState({validToken : false, errorModal});\n            clearInterval(this.refreshPlaylists)\n        }\n    }\n\n    processPlaylist(rawPlayList){\n        let playlists =[];\n        _.forEach(rawPlayList, item => {\n            playlists.push({\n                src : item.images[0].url,\n                albumName : item.name,\n                width : 300,\n                height : 300\n            })\n        })\n        return playlists;\n    }\n\n    render(){\n        return (\n        <div>\n            <NavBar />\n            <Container fluid>\n                <Row>\n                    <Col>\n                        <FilterPanel updateSearchJSON={this.updateSearchJSON} />\n                    </Col>\n                </Row>\n\n                <Row className=\"justify-content-center flex-grow-1\">\n                    <Col>\n                        <PlaylistsResult playlists={this.state.playlists}/>\n                    </Col>\n                </Row>\n            </Container>\n\n            {this.state.loading && <Spinner />}\n            \n            {this.state.errorModal}\n\n            <ToastContainer />\n        </div>\n        )\n    }\n}\n\nFeaturedPlaylist.propTypes = {\n    intl: intlShape.isRequired,\n};\n\nexport default injectIntl(FeaturedPlaylist)","import React from 'react'\nimport {\n    Container,\n    Row,\n    Col,\n    Button,\n    Jumbotron\n} from 'reactstrap';\nimport './css/Login.scss'\nimport {\n    faSpotify\n} from \"@fortawesome/free-brands-svg-icons/index\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport {\n    intlShape,\n    injectIntl,\n} from 'react-intl';\n\nfunction Login (props){\n    const {messages} = props.intl\n    return (\n        <Container className=\"h-100\">\n            <Row className=\"align-items-center h-100\">\n                <Col xs={8} className=\"mx-auto\">\n                    <Jumbotron className=\"text-center justify-content-center\">\n                        <h1 className=\"display-4 mb-5\">Spotifood</h1>\n                        <Button color=\"primary\" type=\"submit\" size=\"lg\"\n                            onClick={() => window.location=`https://accounts.spotify.com/authorize?response_type=token&client_id=dc93f6595d574d0b8f8b35eba887e41d&redirect_uri=${process.env.REACT_APP_REDIRECT_URI}`}>\n                             <FontAwesomeIcon icon={faSpotify} size=\"lg\"/> {messages[\"login.button\"]}\n                            </Button>\n                    </Jumbotron>\n                </Col>\n            </Row>\n        </Container>\n    )\n}\n\nLogin.propTypes = {\n    intl: intlShape.isRequired,\n};\n\nexport default injectIntl(Login)","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.scss';\nimport FeaturedPlaylist from './components/FeaturedPlaylist'\nimport Login from './components/Login'\nimport queryString from 'query-string'\nimport localStorageService from './services/LocalStorageService'\n\nclass App extends Component {\n\n  render() {\n    //TODO learn some route framework\n    const hash = window.location.hash;\n    let queryParam=queryString.parse(hash);\n    let component= <Login />;\n    if(queryParam.access_token){\n      localStorageService.storeToken(queryParam.access_token);\n      component=<FeaturedPlaylist />;\n    }\n\n    return (\n        component\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport {\n    addLocaleData,\n    IntlProvider,\n} from 'react-intl';\nimport pt from 'react-intl/locale-data/pt';\nimport en from 'react-intl/locale-data/en';\nimport localeData from './messages/messages';\n\naddLocaleData([...pt, en]);\nconst language = navigator.language || 'en-US';\nconst message = localeData[language];\n\nReactDOM.render(<IntlProvider locale={language} messages={message}><App /></IntlProvider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export default {\n    \"pt-BR\" : {\n        \"login.button\" : \"Login\",\n        \"filter_panel.title\" : \"Busca de Playlists\",\n        \"filter_panel.filter.locale\" : \"Língua\",\n        \"filter_panel.filter.country\" : \"País\",\n        \"filter_panel.filter.date\" : \"Data e horário\",\n        \"filter_panel.filter.size\" : \"Quantidade (1-50)\",\n        \"filter_panel.filter.page\" : \"Página\",\n        \"error_modal.title\" : \"Erro\",\n        \"error_modal.errorRequest\" : \"Ocorreu um erro ao obter as playlists. Por favor faça o login novamente.\",\n        \"error_modal.expireToken\" : \"Sessão expirou. Por favor faça o login novamente.\",\n        \"playlist_result.empty\" : \"Nenhuma playlist foi encontrada.\"\n    },\n    \"en-US\" : {\n        \"login.button\" : \"Login\",\n        \"filter_panel.title\" : \"Playlist Search\",\n        \"filter_panel.filter.locale\" : \"Locale\",\n        \"filter_panel.filter.country\" : \"Country\",\n        \"filter_panel.filter.date\" : \"Date\",\n        \"filter_panel.filter.size\" : \"Limit (1-50)\",\n        \"filter_panel.filter.page\" : \"Page\",\n        \"error_modal.title\" : \"Error\",\n        \"error_modal.errorRequest\" : \"There was an error fetching playlists. Please login again.\",\n        \"error_modal.expireToken\" : \"Expired session. Please login again.\",\n        \"playlist_result.empty\" : \"No playlist were found.\"\n    }\n  }","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}